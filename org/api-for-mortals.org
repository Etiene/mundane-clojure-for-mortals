#+TITLE: Mundane Clojure for Mortals: Let's build a Web API
#+AUTHOR: Nils Blum-Oeste
#+EMAIL: nblu.com
#+LANGUAGE: en
#+STARTUP: align lognotestate
#+INFOJS_OPT: view:info toc:t
#+HTML_DOCTYPE: html5
#+HTML_CONTAINER_CLASS: container
#+HTML_HEAD: <script src="http://code.jquery.com/jquery-2.1.3.min.js"></script>
#+HTML_HEAD: <script src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/highlight.min.js"></script>
#+HTML_HEAD: <script src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/languages/clojure.min.js"></script>
#+HTML_HEAD: <script src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/languages/bash.min.js"></script>
#+HTML_HEAD: <script src="weave-resources/export.js"></script>
#+HTML_HEAD: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/monokai.min.css">
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css" />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="weave-resources/htmlize.css" />

#+OPTIONS: html-link-use-abs-url:nil html-postamble:nil html-preamble:t html-scripts:t html-style:nil html5-fancy:t
#+OPTIONS: tex:t

* Introduction

  This project illustrates the basic of building a web API with Clojure. Empasis is on using simple approaches, allowing
  Clojure beginners to get started easily. It's not about illustrating the best, state-of-the-art way of building such
  an API with Clojure.

  For a more sophisticated, advanced and structured approach have a look at [[https://github.com/weavejester/duct][duct]] for example.

* Setting up a new project

  You need to have [[https://www.java.com/en/download/help/index_installing.xml][Java installed]]. Things should also work with the .Net CLR, I don't have any experience or interest in
  that. Should you try the CLR, please let me know how it goes.


** Project automation and dependecy Management with Leiningen

   To manage the project dependencies, build the project and handle various tasks during development we are going to use
   Leiningen. Leiningen is a de-factor standard in the Clojure world and very mature.

   To get Leiningen simply follow the installation instruction on the homepage: http://leiningen.org/

   Recently [[https://github.com/boot-clj/boot][Boot]] was introduced as an
   interesting alternative, especially when working on an application (in contrast to library). If you are interested,
   please have a look at [[https://github.com/boot-clj/boot][Boot]], too!

   In the following sections we are going to use Leiningen and you will learn about how to use it on the go.


** Create your new project

   To get started, create a new project using Leiningen:

   #+BEGIN_SRC bash
   $ lein new api-for-mortals
   #+END_SRC

   This will create a new project in a subdirectory called =api-for-mortals=. The project name is also used for the
   Clojure namespaces being created.

** Basic project setup

   The central point for the declarative leiningen project configuration is =project.clj= which can be found in the
   project's root directory. It should look a lot like this:

   #+BEGIN_SRC clojure :tangle ../project.clj :noweb yes
   (defproject api-for-mortals "0.1.0-SNAPSHOT"
     :description "FIXME: write description"
     :url "http://example.com/FIXME"
     :license {:name "Eclipse Public License"
               :url "http://www.eclipse.org/legal/epl-v10.html"}
     :dependencies [[org.clojure/clojure "1.6.0"]
                    <<project-dependencies>>]
     <<project-ring>>)
   #+END_SRC

   This defines your project. The first two parameters to =defproject=  are the project name and the version,
   =:description=, =:url= and =:license= should be self explaining. =:dependencies= is a list of lists definining the
   project's dependencies. As you can see, Clojure itself is a dependency of the project. This makes it very easy to use
   a specific version of Clojure in your project (and another version in any other project).

* HTTP handling: One Ring to rule them all!

  [[https://github.com/ring-clojure/ring][Ring]] is a Clojure library to handle HTTP requests with similarities from Python's WSGI and Ruby's Rack. Ring is
  another de-factor standard in the Clojure world. Many other libraries build on top of Ring.

  To use it in our project, we need to add it as a dependency in =project.clj=. Add these two vectors to the depenencies:
  #+BEGIN_SRC clojure :noweb-ref project-dependencies
  [ring/ring-core "1.3.2"]
  [ring/ring-jetty-adapter "1.3.2"]
  #+END_SRC

  We added the core ring module and the HTTP server http-kit.

  The next time we run any =lein= task, it will automatically pull the libraries from [[https://clojars.org/][Clojars]].

** Handling our first HTTP request

   Nothin more is needed to start building our web API. To actually handle requests, we need to define Ring handlers.
   Handlers are functions which take a map representing the request as input and return a map representing the
   response.

   Let's write our first handler in =src/api_for_mortals/core.clj=:

   #+BEGIN_SRC clojure :tangle ../src/api_for_mortals/simple.clj
   (ns api-for-mortals.simple)

   (defn hello-handler [request]
     {:status 200
      :headers {"Content-Type" "text/plain"}
      :body (str "Hello " (:body request))})
   #+END_SRC

   This simple handler is a pure function and their at no dependencies for the namespace at all! It simply transforms
   the input map (request) to an output map (response), operating on simple, basic data structures.


** Convenience: Ring plugin for Leiningen

   We can make using Ring a bit more comfortable by using the Lein-Ring plugin. Add this map to =project.clj=:

   #+BEGIN_SRC clojure :noweb-ref project-ring
   :plugins [[lein-ring "0.9.1"]]
   #+END_SRC

   The entry point for ring gets defined like this:
   #+BEGIN_SRC clojure
   :ring {:handler api-for-mortals.simple/hello-handler}
   #+END_SRC

   Now run =lein ring server= in the project root directory to start your web application. Head over to
   http://localhost:3000 to see the response from your ring handler.

* Better responses: Ring middlewares

  #+BEGIN_SRC clojure :noweb-ref project-dependencies
  [ring/ring-json "0.3.1"]
  #+END_SRC

  Creating a new handler which returns the request map as json data:

  #+BEGIN_SRC clojure :tangle ../src/api_for_mortals/simple.clj
  (require '[ring.middleware.json :as json])
  (def hello-json-handler
    (json/wrap-json-response
      (fn [req] {:status 200 :body (dissoc req :body)})))
  #+END_SRC

  =request :body= is an InputStream which cannot be parsed by the json middleware, thus we remove it from the response.

  Let's also update the ring config to use the new handler when running =lein ring server=:

  #+BEGIN_SRC clojure
  :ring {:handler api-for-mortals.simple/hello-json-handler}
  #+END_SRC

* Convenient routing with Compojure
 - COMMENT Put this before ring middlewares?

   [[https://github.com/weavejester/compojure][Compojure]] is a popular library to handle routing in Ring applications.

   To use it, simply add the dependecy to =project.clj=:

   #+BEGIN_SRC clojure :noweb-ref project-dependencies
   [compojure "1.3.1"]
   #+END_SRC

** Namespace setup
   :PROPERTIES:
   :noweb-ref: api-app
   :END:

   Setup a new file and namespace for the compojure handlers:

   #+BEGIN_SRC clojure
   (ns api-for-mortals.compojure
     (:require [compojure.core :refer :all]
               [compojure.route :as route]
               [clojure.edn :as edn]
               [ring.middleware.json :as json]
               [ring.middleware.params :as params]))

   #+END_SRC

   - compojure :: =compojure.core= has the main functions we need to define routes with compojure and =compojure.route=
        offers a convenient, premade route to handle missing routes with an 404 HTTP error.


  - clojure.edn :: [[https://github.com/edn-format/edn][EDN (Extensible Data Notation)]] is a data format, a subset of the Clojure data notation. It's worth having a look at
       it. Here we are only using it to coerce string parameters from HTTP requests to integers via =clojure.edn/read-string=.


   - ring.middleware :: =ring.middleware.json= we already know, we use it to build proper JSON responses. =ring.middleware.params= is used to
        extract parameters from the request's query string.

** Some functions to produce "meaningful" output
   :PROPERTIES:
   :noweb-ref: api-app
   :END:

   #+BEGIN_SRC clojure
   (defn rnd-int-in-range [min max]
     (+ min (rand-int (+ (- max min) 1))))

   (defn randomizer [min-str max-str]
     (let [min (edn/read-string min-str)
           max (edn/read-string max-str)]
       (rnd-int-in-range min max)))

   #+END_SRC

** Defining routes and their handlers
   :PROPERTIES:
   :noweb-ref: api-app
   :END:

   A small collection of routes.
   #+BEGIN_SRC clojure
   (defroutes api-routes
     (GET "/bounce-request" request {:body (dissoc request :body)})
     (GET "/users/:id" [id] {:body {:name "foo" :id id :role "admin"}})
     (GET "/randomizer" [min max] {:body {"randomNumber" (randomizer min max)}})
     (route/not-found {:body {:error "Page not found"}}))

   #+END_SRC

   Wrapping the routes with ring middlewares to get parameters from requests and produce JSON output in the responses.
   #+BEGIN_SRC clojure
   (def api
     (-> api-routes
       params/wrap-params
       json/wrap-json-response))

   #+END_SRC

** Complete namespace
   #+BEGIN_SRC clojure :noweb yes :tangle ../src/api_for_mortals/compojure.clj
   <<api-app>>
   #+END_SRC

** Update ring entry point

   Update the entry point for the ring server in =project.clj=  to use our new, improved handler:

   #+BEGIN_SRC clojure
   :ring {:handler api-for-mortals.compojure/api-app}
   #+END_SRC
* Sweet APIs: Compojure-Swagger
  https://github.com/metosin/compojure-api#sample-minimalistic-swaggered-app

  Add the dependencies for the API library and the API testing UI to =project.clj=:
  #+BEGIN_SRC clojure :noweb-ref project-dependencies
  [metosin/compojure-api "0.17.0"]
  [metosin/ring-swagger-ui "2.1.1-M1"]
  #+END_SRC


  #+BEGIN_SRC clojure :tangle ../src/api_for_mortals/swagger.clj
  (ns api-for-mortals.swagger
    (:require [ring.util.http-response :refer [ok]]
              [compojure.api.sweet :refer :all]))

  (defroutes* api
    (context "/api" []
      (GET* "/jolts/:id" [id]
        (ok {:id id}))
      (POST* "/jolts" []
        :body-params [body :- Long]
        (ok {:data body}))))
  #+END_SRC

   #+BEGIN_SRC clojure
   (require '[api-for-mortals.swagger :as swagger])

   (def api-app
     (let [old-routes (-> api-routes
                        params/wrap-params
                        json/wrap-json-response)
           new-routes swagger/api]
       (routes new-routes old-routes)))
   #+END_SRC
* Authentication and Authorization: Buddy
  Buddy is a small set of libraries for authentication and authorization including the needed cryptography, hashing and
  message signing. If needed these libs can be used independently.

  Add dependency for 'buddy' meta package, including all these libraries:

  #+BEGIN_SRC clojure :noweb-ref project-dependencies
  [buddy "0.4.1"]
  #+END_SRC

  Buddy supports multiple auth mechanisms, including HTTP basic auth, sessions and tokens, as well as stateless
  authentication. We are going to use the latter one.

** Stateless authentication
   :PROPERTIES:
   :noweb-ref: auth-api
   :END:

   Buddy's stateless authentication is based on JSON Web Signatures (JSW).

   #+BEGIN_SRC clojure
   (ns api-for-mortals.auth
     (:require [buddy.sign.jws :as jws]
               [buddy.auth :refer [authenticated?]]
               [buddy.auth.middleware :refer [wrap-authentication]]
               [buddy.auth.backends.token :refer [jws-backend]]
               [ring.util.http-response :refer [ok unauthorized]]
               [compojure.api.sweet :refer :all]))

    #+END_SRC

   Some dummy data to work with.

   #+BEGIN_SRC clojure
   (def secret "abc123")

   (def user {:id 3
              :username "foo"
              :password "bar"})

   (def users {(:id user) user})

   #+END_SRC

   When submitting valid credentials to the login endpoint, the user receives a token with his encrypted id.

   #+BEGIN_SRC clojure
   (defn login [username password]
     (if (and (= username (:username user))
           (= password (:password user)))
       {:token (jws/sign {:id (:id user)} secret)}
       nil))

   #+END_SRC

   The =auth-backend= checks the request data for an authorization header and tries to decode it. If successful, it
   writes the decoded data to the key =:identity= in the =request= map.

   #+BEGIN_SRC clojure
   (def auth-backend (jws-backend {:secret secret}))
    #+END_SRC

   A very simple middleware to check if the user is authenticated. For authenticated users is calls the given handler,
   othwerise it returns an HTTP error.
   =authenticated?= checks for an existing (non-nil) value of =:identity= in the =request= map (see =auth-backend= above).

    #+BEGIN_SRC clojure
   (defn auth-mw [handler]
     (fn [request]
       (if (authenticated? request)
         (handler request)
         (unauthorized {:error "Invalid Token"}))))
    #+END_SRC

    #+BEGIN_SRC clojure
    (defroutes* auth-api
      (context "/auth-api" []

        (wrap-authentication
          (GET* "/users/:id" {:as request}
            :middlewares [api-for-mortals.auth/auth-mw]
            :header-params [authorization :- String]
            (ok (:identity request)))
          auth-backend)

        (POST* "/login" []
          :body-params [username :- String
                        password :- String]
          (ok (login username password)))))
   #+END_SRC

** Updated ring entry point

   #+BEGIN_SRC clojure :tangle ../src/api_for_mortals/server.clj
   (ns api-for-mortals.server
     (:require [compojure.api.sweet :refer :all]
               [api-for-mortals.compojure :as comp]
               [api-for-mortals.swagger :as swagger]
               [api-for-mortals.auth :as auth]))

   (defapi api-app
     (swagger-ui)
     (swagger-docs)
     comp/api
     (swaggered "No Authentication" swagger/api)
     (swaggered "Authentication" auth/auth-api))
   #+END_SRC

   #+BEGIN_SRC clojure :noweb-ref project-ring
   :ring {:handler api-for-mortals.server/api-app}
   #+END_SRC
  further reading:
  - [[http://lucumr.pocoo.org/2013/11/17/my-favorite-database/][Armin Ronacher: My favorite database]]
  - [[http://www.niwi.be/2014/06/07/stateless-authentication-with-api-rest/][Andrey Antukh: Stateless authentication with API REST]]
** Complete file
   #+BEGIN_SRC clojure :noweb yes :tangle ../src/api_for_mortals/auth.clj
   <<auth-api>>
   #+END_SRC

* Connecting a database
* Integrating other HTTP services
* Deployment
* Automated Testing
* Appendix
** Important Ring Concepts

 - Handlers :: Ring handlers are Clojure functions taking a map representing the HTTP requests as an argument and
      return a map representing the HTTP response. Thus handlers transform requests into repsonses.
      ([[https://github.com/ring-clojure/ring/wiki/Concepts#requests][Request Map Reference]], [[https://github.com/ring-clojure/ring/wiki/Concepts#responses][Response Map Reference]]).

 - Middleware :: Middleware are higher order functions taking a handler as an argument and returning a new,
      transformed handler. Middleware extends the handling of raw HTTP requests to add functionalities like request
      parameters, sessions, file uploading etc.

      Middleware example:
      #+BEGIN_SRC clojure
      ;; defining the middleware
      (defn wrap-content-type [handler content-type]
        (fn[request]
          (let [response (handler request)]
            (assoc-in response [:headers "Content-Type"] content-type))))

      ;; wrapping the middleware around a handler
      (def app (wrap-content-type handler "text/html"))
      #+END_SRC

 - Adapters :: Adapters connect Ring to web servers like Jetty, http-kit, etc.
** Frameworks / Boilerplates
   - [[http://yogthos.net/posts/2015-02-28-Luminus-2.0.html][Luminus 2.0]]

* Always respond properly: Liberator
  should I include Liberator?
  or maybe just mention it?
  I suspect it not to work (well) with swagger
